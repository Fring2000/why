1st)
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    char b[30] = "20=i+c";
    int i;
    
    for(i = 0; i < strlen(b); i++) {
        if(isdigit(b[i])) {  // Correct way to check digits
            printf("Constant: %c\n", b[i]);
        }
        else if(isalpha(b[i])) {  // Correct way to check letters
            printf("Identifier: %c\n", b[i]);
        }
        else if(b[i] == '+' || b[i] == '=') {  // Combined operator check
            printf("Operator: %c\n", b[i]);
        }
        else {
            printf("Unknown symbol: %c\n", b[i]);  // Better error message
        }
    }
    return 0;
}
--------------------------------------------------------------------------------------------
2nd
#include<stdio.h>
int main(){
    char line[100]="/*hello there";
    if(line[0]=='/'&&line[1]=='/'){
        printf("This line is a single line comment");
    }else if(line[0]=='/'&&line[1]=='*'){
        printf("THis line is a multi line comment");
    }else{
        printf("The line is not a comment");
    }
    return 0;
}
-------------------------------------------------------------------------------------------
3rd
#include<stdio.h>
int main(){
    char op[100]="/";
    switch(op[0]){
        case '+' : 
        printf("Addition");
        break;
        case '-':
        printf("Sub");
        break;
        case '*':
        printf("mul");
        break;
        case '/':
        printf("division");
        break;
    }
    return 0;
}
--------------------------------------------------------------------------------------------
4th
#include<stdio.h>
#include<string.h>
int main(){
    char text[]="hello this is a test\ndone";
    int lets=0,words=0,lines=0,in_word=0;
    for(int i=0;text[i]!='\0';i++){
        lets++;
        if(text[i]=='\n'){
            lines++;
        }
        if(text[i]==' '||text[i]=='\t'||text[i]=='\n'){
            if(in_word){
                words++;
                in_word=0;
            }
        }else{
            in_word=1;
        }
    }
    if(in_word){
        words++;
    }
    lines++;
    printf("Total words: %d\n",words);
    printf("Total lines: %d\n",lines);
    printf("Total characters: %d",lets);
    return 0;
}
-------------------------------------------------------------------------------------------
5th
#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main(){
    char text[]="abc123";
    int i;
    int valid=1;
    if(!isalpha(text[0])&&text[0]=='_'){
        valid=0;
    }
    for(i=0;i<strlen(text);i++){
        if(!isalnum(text[i])&&text[i]=='_'||text[i]=='@'||text[i]=='#'){
            valid=0;
            break;
        }
    }
    if(valid){
        printf("Valid");
    }else{
        printf("Not valid");
    }
    return 0;
}
----------------------------------------------------------------------------------------------
6th
#include<stdio.h>
#include<string.h>
int main(){
    char non_terminal='A';
    char productions[][10]={"Aa","b"};
    int num_productions=2;
    printf("Original grammer:\n");
    printf("%c -> ",non_terminal);
    for(int i=0;i<num_productions;i++){
        printf("%s | ",productions[i]);
    }
    printf("\n");
    int has_recursion=0;
    for(int i=0;i<num_productions;i++){
        if(productions[i][0]==non_terminal){
            has_recursion=1;
            break;
        }
    }
    if(!has_recursion){
        printf("NO left recursion found\n");
        return 0;
    }
    printf("Grammer after eliminating left recursion: \n");
    char new_non_terminal =non_terminal;
    printf("%c -> ",non_terminal);
    for(int i=0;i<num_productions;i++){
        if(productions[i][0]!=non_terminal){
            printf("%s%c' | ",productions[i],new_non_terminal);
        }
    }
    printf("\n%c -> ",new_non_terminal);
    for(int i=0;i<num_productions;i++){
        if(productions[i][0]==non_terminal){
            printf("%s%c' | ",productions[i]+1,new_non_terminal);
        }
    }
    printf("e\n");
    return 0;
}
--------------------------------------------------------------------------------------
7th
#include <stdio.h>

int main() {
    char common = 'a'; // Common prefix
    char nt = 'A';     // Non-terminal
    char opts[] = "BC"; // Different parts after prefix
    
    printf("Original: %c -> %c%c | %c%c\n", nt, common, opts[0], common, opts[1]);
    printf("After elimination:\n");
    printf("%c  -> %c%c'\n", nt, common, nt);
    printf("%c' -> %c | %c\n", nt, opts[0], opts[1]);
    
    return 0;
}